package modelselection.cpo;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import beast.app.treeannotator.TreeAnnotator;
import beast.app.util.LogFile;
import beast.app.util.TreeFile;
import beast.app.util.XMLFile;
import beast.core.*;
import beast.core.Runnable;
import beast.core.util.Log;
import beast.util.LogAnalyser;
import beast.util.XMLParser;
import beast.util.XMLParserException;

@Description("Analyse trace and tree log of an XML analysis")
public class BEASTRunAnalyser extends Runnable {
	final public Input<XMLFile> xmlFileInput = new Input<>("xmlFile","input file containing model in BEAST XML. Expects an XML file with posterior CompoundDistribution containing a likelihood CompoundDistribution, as usually generated by BEAUti.");
	final public Input<LogFile> traceFileInput = new Input<>("logFile","input file containing trace log. If not specified, use trace log file from XML");
	final public Input<TreeFile> treeFileInput = new Input<>("treeFile","input file containing tree log. If not specified, use tree log file from XML");
	public Input<Integer> burninInput = new Input<>("burnin", "percentage of the log file to disregard as burn-in (default 10)" , 10);

	@Override
	public void initAndValidate() {
		
	}

	@Override
	public void run() throws Exception {
		// TODO Auto-generated method stub
		
	}

	
	static protected boolean isSpecified(File file) {
		if (file == null || file.getName().equals("[[none]]")) {
			return false;
		}
		return true;
	}


	protected MCMC getMCMC() throws SAXException, IOException, ParserConfigurationException, XMLParserException {
		MCMC mcmc = null;
		XMLParser parser = new XMLParser();
		try {
			mcmc = (MCMC) parser.parseFile(xmlFileInput.get());
			mcmc.robustlyCalcPosterior(mcmc.posteriorInput.get());
		}  catch (ClassCastException e) {
			throw new IllegalArgumentException("The XML file does not seem to contain an MCMC analysis");
		}
		return mcmc;
	}

	protected TreeAnnotator.TreeSet getTreeSet(MCMC mcmc) throws IOException {
		TreeAnnotator.TreeSet treeSet = null;
		if (isSpecified(treeFileInput.get())) {
			treeSet = new TreeAnnotator(). new MemoryFriendlyTreeSet(treeFileInput.get().getPath(), burninInput.get());		
		} else {
			for (Logger logger : mcmc.loggersInput.get()) {
				if (!logger.isLoggingToStdout() && logger.modeInput.get().equals(Logger.LOGMODE.tree)) {
					if (treeSet != null) {
						Log.warning("WARNING: multiple tree logs found in XML. Using the first one, but this will probably fail.");
					} else {
						treeSet = new TreeAnnotator().new MemoryFriendlyTreeSet(logger.fileNameInput.get(), burninInput.get());
					}
				}
			}
			if (treeSet == null) {
				throw new IllegalArgumentException("Could not find suitable tree log file in XML");
			}
		}
		return treeSet;
	}

	static public LogAnalyser getTraceLog(MCMC mcmc, File traceFile, int burninPercentage) throws IOException {
		LogAnalyser tracelog = null;
		if (isSpecified(traceFile)) {
			tracelog = new LogAnalyser(traceFile.getAbsolutePath(), burninPercentage, true, false);
		} else if (mcmc != null) {
			for (Logger logger : mcmc.loggersInput.get()) {
				if (!logger.isLoggingToStdout() && logger.modeInput.get().equals(Logger.LOGMODE.compound)) {
					if (tracelog != null) {
						Log.warning("WARNING: multiple trace logs found in XML. Using the first one, but this may fail.");
					} else {
						Log.warning("Loading trace log from " + logger.fileNameInput.get());
						tracelog = new LogAnalyser(logger.fileNameInput.get(), burninPercentage);
					}
				}
			}
			if (tracelog == null) {
				throw new IllegalArgumentException("Could not find suitable trace log file in XML");
			}
		} else {
			throw new IllegalArgumentException("Could not find suitable trace log file in " + traceFile.getAbsolutePath() + " or XML");			
		}
		return tracelog;
	}}
